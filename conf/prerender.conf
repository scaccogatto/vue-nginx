user  nginx;
worker_processes  auto;

error_log  off;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  off;

    # performance
    sendfile            on;
    sendfile_max_chunk  2m;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;

    # gzip
    gzip    on;

    server {
        listen 80 reuseport default_server;
        root /usr/share/nginx/html;
        index index.html;

        # base security
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # kubernetes default healtcheck
        location /healthz {
            return 200;
        }

        location / {
            # no cache on index.html
            add_header  Cache-Control no-cache;
            expires     0;

            try_files $uri @prerender;
        }

        location ~* .(jpg|jpeg|png|gif|ico|css|js|pdf|doc)$ {
            # cache everything forever since index.html will handle it for you
            expires max;
        }

        location @prerender {
            #proxy_set_header X-Prerender-Token YOUR_TOKEN;
            
            set $prerender 0;
            if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
                set $prerender 1;
            }
            if ($args ~ "_escaped_fragment_") {
                set $prerender 1;
            }
            if ($http_user_agent ~ "Prerender") {
                set $prerender 0;
            }
            if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|svg|eot)") {
                set $prerender 0;
            }
            
            #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
            #resolver 8.8.8.8;

            #resolve using local k8s cluster
            resolver 127.0.0.1:53 ipv6=off;
    
            if ($prerender = 1) {
                
                #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
                set $prerender "${PRERENDER_SERVER}";
                rewrite .* /$scheme://$host$request_uri? break;
                proxy_pass $prerender;
            }
            if ($prerender = 0) {
                rewrite .* /index.html break;
            }
        }
    }
}